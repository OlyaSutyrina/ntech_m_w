--------------------
Описание запуска Process.py для использования нейросети в командной строке:

python.exe Process.py --input path_to_imagefolder --checkpoint path_to_trained_net

где path_to_imagefolder - путь к папке с изображениями,
    path_to_trained_net - путь к папке с тренированной моделью (Best_mobnet_all.pth)

--------------------

Описание документа, который содержит функцию препоцессинга, тренировки данных - Ntechlab_CNNcustom_ .ipynb.


Загрузка данных из указанной папки производится с помощью функции ImageFolder, которая позволяет сформировать датасет 
из пар тензоров изображений и ответов (0- женщина, 1-мужчина). Поскольку каждое изображение имеет разное разрешение, все изображения 
необходимо привести к единому размеру 224х224 (интерполяция PIL.Image.BILINEAR до 226х226 и обрезка относительно центра) и нормировать, 
чтобы быстрее прийти к оптимуму при тренировке. Такое преобразование выполняется с помощью функции transforms(). data_dir - директория
расположения изображений.

Далее необходимо разбить весь датасет на 2 части: test и train (30000 и 70009 изображений) 
Индексы для train set определены вычитаем множеств (множество, содержащее все индексы - множество, содержащее индексы test set)

Далее из исходного датасета с помощью функции torch.utils.data.Subset формируются 2 датасета - train set и test set, разбивая в каждом из
них данные на пакеты (batches) по 250 единиц, для последующей загрузки их в функцию тренировки.

Архитектура нейросети (CNNClassifier) состоит из блоков конволюционных слоев и полносвязного слоя, который обеспечивает классификацию
на выходе из последнего слоя. Конволюционные слои прекрасно извлекают из данных структуры и паттерны, что прекрасно подходит для
задач классификации. Dropout служат для присекания переобучения, своего рода регуляризация в нейросетях. 
Функция потерь - CrossEntropyLoss(), позволяет определить класс по максимальной вероятности 
принадлежности. Алгоритм оптимизации - Adam (скорость градиентного спуска(learning rate) - lr=1e-4, weight_decay=1e-6).

Чтобы ускорить обучение нейросети, были установлены значения весов из нормального распределения с помощью функции
weights_init

Обучение нейросети производилось на 10 эпохах (лучшая конфигурация параметров нейросети определилась на эпохе 9, accuracy
на данной эпохе составила - 0.9508).
В конце обучения нейросеть была отдельно сохранена для последующего использования в скрипте Process.py
path - директория сохранения файлов.


Тренировка модели производила на google colab.

